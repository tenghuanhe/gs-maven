version: 2.1

jobs:
  hello-circleci:
    docker:
      - image: cimg/base:2021.04
    steps:
      - run:
          command: |
            sudo apt-get update && sudo apt-get install -y openjdk-8-jdk
            export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/
            echo "Hello CircleCI"
            echo $JAVA_HOME
            echo $(java -version)
            echo "Installing flink-1.12"
            sudo chown -R $USER:$USER /opt
            mkdir /opt/flink
            curl -LO https://downloads.apache.org/flink/flink-1.12.7/flink-1.12.7-bin-scala_2.12.tgz
            tar xf flink-1.12.7-bin-scala_2.12.tgz -C /opt/flink
            mv /opt/flink/flink-1.12.7 /opt/flink/1.12
            echo "Installing spark-3.1"
            mkdir /opt/spark
            curl -LO https://downloads.apache.org/spark/spark-3.1.3/spark-3.1.3-bin-hadoop3.2.tgz
            tar xf spark-3.1.3-bin-hadoop3.2.tgz -C /opt/spark
            mv /opt/spark/spark-3.1.3-bin-hadoop3.2 /opt/spark/3.1
            /opt/flink/1.12/bin/start-cluster.sh
            /opt/flink/1.12/bin/stop-cluster.sh

  connect-mysql:
    docker:
      - image: circleci/openjdk:8-jdk
        environment:
          DB_ROOT_USER: root
          DB_PASS: ""
      - image: circleci/mysql:8.0
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: ''
    steps:
      - run:
          name: Wait for Database connection
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Install MySQL client
          command: sudo apt-get update && sudo apt-get install default-mysql-client
      - run: mysql -h 127.0.0.1 -u root -e "create database test"
      - run: mysql -h 127.0.0.1 -u root -e "create database cost_usage"
      - run: mysql -h 127.0.0.1 -u root -D test -e "create table customers (name varchar(255), city varchar(255), country varchar(255) );"
      - run: mysql -h 127.0.0.1 -u root -D test -e "insert into customers (name, city, country) values ('Cardinal', 'Stavanger', 'Norway');"
      - run: mysql -h 127.0.0.1 -u root -D test -e "select * from customers;"
      - run: mysql -h 127.0.0.1 -u root -e "select * from test.customers;"

  test:
    docker:
      - image: cimg/openjdk:17.0.1
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }} # appends cache key with a hash of pom.xml file
            - v1-dependencies- # fallback in case previous cache key is not found
      - attach_workspace:
          at: ./target
      - run: chmod +x mvnw && ./mvnw test
      - store_artifacts:
          path: target/site
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

  build:
    docker:
      - image: cimg/openjdk:17.0.1
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }} # appends cache key with a hash of pom.xml file
            - v1-dependencies- # fallback in case previous cache key is not found
      - run: chmod +x mvnw && ./mvnw -Dmaven.test.skip=true package
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - persist_to_workspace:
          root: ./
          paths:
            - target/

workflows:
  version: 2

  #  build-then-test:
  #    jobs:
  #      - hello-circleci
  #      - build
  #      - test:
  #          requires:
  #            - build

  hello:
    jobs:
      - hello-circleci
#      - connect-mysql